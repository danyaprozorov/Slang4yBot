import telebot
import cfg
import random
from telebot import types
import datetime
import time

bot = telebot.TeleBot(cfg.TOKEN)


class Words(object):
    def __init__(self, wrd, trans, diff, topic, img, prog, prog2):
        self.wrd = wrd
        self.trans = trans
        self.diff = diff
        self.topic = topic
        self.img = img
        self.prog = prog
        self.prog2 = prog2


class user:
    def __init__(self, id, choic, lear, inproc):
        self.id = id
        self.choic = choic
        self.lear = lear
        self.inproc = inproc

class game:
    def __init__(self, gnum, answer, mod, word, learned):
        self.gnum = gnum
        self.answer = answer
        self.mod = mod
        self.word = word
        self.learned = learned

class date:
    def __init__(self, day, month, today, max):
        self.day = day
        self.month = month
        self.today = today
        self.max = max

@bot.message_handler(commands=['start'])
def start(message):
    nikita.id = f'{message.from_user.id}'
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç Slang4uBot')
    time.sleep(2)
    bot.send_message(message.chat.id, '–Ø –±—É–¥—É —Ç–≤–æ–∏–º –ª–∏—á–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —Å –ø–æ–º–æ—â—å—é '
                                      '—Å–ª—ç–Ω–≥–æ–≤—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π')
    time.sleep(2)
    markup_reply = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_hello = types.KeyboardButton('–ü—Ä–∏–≤–µ—Ç üëã')
    markup_reply.add(item_hello)
    bot.send_message(message.chat.id, '–ú—ã –±—É–¥–µ–º –æ–±—â–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫. –ù–∞–∂–∏–º–∞–π...', reply_markup=markup_reply)


@bot.callback_query_handler(func=lambda call: True)
def answer(call):
    if call.data == game.answer and game.answer != 'no':
        if game.mod == 3:
            game.mod = -1
        game.mod += 1
        bot.send_message(call.message.chat.id, '–î–∞! —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å üëç')
        game.answer = 'no'
        i = -1
        while game.word != wordss[i].wrd:
            i += 1
            if game.word == wordss[i].wrd:
                wordss[i].prog2 += 1
                if wordss[i].prog == 0:
                    wordss[i].prog = 1
                if wordss[i].prog2 >= 4:
                    wordss[i].prog2 = 0
                    wordss[i].prog = 2
                    game.learned += 1
                    time1()
    elif game.answer != 'no':
        bot.send_message(call.message.chat.id, '–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –æ—à–∏–±—Å—è üëé')
        if game.mod == 3:
            game.mod = -1
        game.mod += 1
        game.answer = 'no'
    if game.gnum == 60:
        learning.clear()
        nikita.lear = 0
        bot.send_message(call.message.chat.id, '–ù–∞ —ç—Ç–æ –≤—Å–µ) –í —ç—Ç–æ—Ç —Ä–∞–∑' + str(game.learned) + ' —Å–ª–æ–≤(–∞))')
        markup_reply = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup_reply.add(item_back)
        bot.send_message(call.message.chat.id, '–ñ–º—è–∫–∞–π', reply_markup=markup_reply)
    else:
        markup_reply = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item_next = types.KeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
        item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup_reply.add(item_next, item_back)
        bot.send_message(call.message.chat.id, '–õ–µ—Ç–∏–º –¥–∞–ª—å—à–µ? üöÄ', reply_markup=markup_reply)

@bot.message_handler(content_types=['text'])
def get_text(message):
    saves()
    if message.text == '–ü—Ä–∏–≤–µ—Ç üëã':
        time.sleep(2)
        bot.send_message(message.chat.id, f'–ù—É –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ, —è —É–∂–µ —Ç–µ–±—è –∑–∞–∂–¥–∞–ª—Å—è, {message.from_user.first_name}')
        time.sleep(2)
        bot.send_message(message.chat.id, '–ù–µ–º–Ω–æ–≥–æ –≤–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –º—ã –Ω–∞—á–Ω–µ–º')
        time.sleep(2)
        bot.send_message(message.chat.id, '–£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–π:')
        time.sleep(2)
        bot.send_message(message.chat.id, '–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å(—Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ—é —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å –∏ —Å–º–æ—Ç—Ä–µ—Ç—å, '
                                          '—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—ã –ø—Ä–æ–≤–µ–ª —Å–æ –º–Ω–æ–π)')
        time.sleep(2)
        bot.send_message(message.chat.id,
                         '–í—ã–±–æ—Ä —Å–ª–æ–≤(—è –Ω–µ —Ö–æ—á—É –¥–∞–≤–∏—Ç—å –Ω–∞ —Ç–µ–±—è —Å–≤–æ–∏–º –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–æ–º, —Ç–∞–∫ —á—Ç–æ —Ç—ã —Å–∞–º –º–æ–∂–µ—à—å '
                         '–≤—ã–±–∏—Ä–∞—Ç—å, —á—Ç–æ —É—á–∏—Ç—å). –î–∞–≤–∞–π-–∫–∞ —è —Ç–µ–±–µ –≤—Å–µ —Ä–∞–∑–∂—É—é: —Ç–∞–ø–Ω—É–≤ –Ω–∞ —ç—Ç—É –≤–∫–ª–∞–¥–∫—É —É —Ç–µ–±—è '
                         '–ø–æ—è–≤–∏—Ç—Å—è –ø–µ—Ä–≤—ã–π —Å–ª–µ–Ω–≥ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è 3 –ø—É–Ω–∫—Ç–∞: "–∏–∑—É—á–∏—Ç—å", '
                         '"–æ—Ç–ª–æ–∂–∏—Ç—å" –∏ "—è –∑–Ω–∞—é —ç—Ç–æ —Å–ª–æ–≤–æ". –í—ã–±—Ä–∞–≤ –ø–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç, —ç—Ç–æ —Å–ª–æ–≤–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—Å—è '
                         '–≤–æ –≤–∫–ª–∞–¥–∫—É "—É—á–∏—Ç—å —Å–ª–æ–≤–∞", –≥–¥–µ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è. –í—ã–±—Ä–∞–≤ –≤—Ç–æ—Ä–æ–π '
                         '–ø—É–Ω–∫—Ç, —Ç—ã –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ—à—å –∏–∑—É—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–∞ –ø–æ—Ç–æ–º, –Ω–æ –Ω–µ –≤–æ–ª–Ω—É–π—Å—è, '
                         '—Ç—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—à—å –∫ –Ω–µ–º—É –≤–µ—Ä–Ω—É—Ç—å—Å—è. –¢—Ä–µ—Ç–∏–π –ø—É–Ω–∫—Ç —É–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '
                         '–∏ –ø–æ–º–µ—á–∞–µ—Ç –µ–≥–æ –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–æ–µ.')
        time.sleep(2)
        bot.send_message(message.chat.id,
                         '–£—á–∏—Ç—å —Å–ª–æ–≤–∞(–¥—É–º–∞—é, —Ç—É—Ç –æ–±—ä—è—Å–Ω—è—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ, —Ç–∞–ø–∞–π –∫–Ω–æ–ø–∫—É –∏ –æ—Ç–∫—Ä—ã–≤–∞–π –¥–ª—è '
                         '—Å–µ–±—è –Ω–µ–∏–∑–≤–µ–¥–∞–Ω–Ω—ã–µ —Å–ª—ç–Ω–≥–∏)')
        time.sleep(2)
        bot.send_message(message.chat.id, '–¢–æ–ø–∏–∫–∏(—Ç—ã –º–æ–∂–µ—à—å —Å–∞–º –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ø–∏–∫–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –Ω–æ –±—É–¥—å '
                                          '–æ—Å—Ç–æ—Ä–æ–∂–µ–Ω, —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—á–µ–Ω—å –∫–æ–≤–∞—Ä–Ω—ã–π –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è '
                                          '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üîû). –í—ã–±—Ä–∞–≤, –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Ç–æ–ø–∏–∫, —Ç–≤–æ–∏–º –æ—á–∞–º –ø—Ä–µ–¥—Å—Ç–∞–Ω—É—Ç 5 '
                                          '—É–º–æ–ø–æ–º—Ä–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—ç–Ω–≥–æ–≤, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç–µ–±—è –æ–∂–∏–¥–∞–µ—Ç –Ω–µ–±–æ–ª—å—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞, '
                                          '–∫–æ—Ç–æ—Ä—É—é —Ç—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –ø—Ä–æ—Å—Ç–æ –≤—ã–π–¥—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é(—á—Ç–æ–±—ã '
                                          '–æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Ç–æ–ø–∏–∫)')
        time.sleep(2)
        bot.send_message(message.chat.id, 'C —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?')
        main_menu(message)
    if message.text == '–í—ã–±–æ—Ä —Å–ª–æ–≤':
        choice(message)
    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        main_menu(message)
    if message.text == '–ò–∑—É—á–∏—Ç—å':
        wordss[nikita.choic].prog = 1
        nikita.choic += 1
        choice(message)
    if message.text == '–û—Ç–ª–æ–∂–∏—Ç—å':
        nikita.choic += 1
        choice(message)
    if message.text == '–Ø –∑–Ω–∞—é —ç—Ç–æ —Å–ª–æ–≤–æ':
        wordss[nikita.choic].prog = 2
        time1()
        nikita.choic += 1
        choice(message)
    if message.text == '–£—á–∏—Ç—å —Å–ª–æ–≤–∞':
        learn(message)
    if message.text == '–ò–∑—É—á–∞–µ–º—ã–µ —Å–ª–æ–≤–∞':
        learnwords(message)
    if message.text == '–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ':
        learni(message)
    if message.text == '–°–ª–µ–¥—É—â–∏–µ':
        nikita.lear += 1
        if nikita.lear < 5:
            rep(message)
        else:
            nikita.lear = 0
            bot.send_message(message.chat.id, '–¢—ã –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?')
            markup_reply = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_startt = types.KeyboardButton('–ù–∞—á–∞—Ç—å')
            item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup_reply.add(item_startt, item_back)
            bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∞–π)', reply_markup=markup_reply)
    if message.text == '–ù–∞—á–∞—Ç—å':
        game.gnum = 0
        game.mod = 0
        game.learned = 0
        markup_reply = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup_reply.add(item_back)
        bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∞–π)', reply_markup=markup_reply)
        gamek(message)
    if message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        markup_reply = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup_reply.add(item_back)
        bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∞–π)', reply_markup=markup_reply)
        if game.mod == 0 or game.mod == 2:
            gamek(message)
        else:
            gamer(message)
    if message.text == '–í—ã–±–æ—Ä —Ç–æ–ø–∏–∫–∞':
        topicchoice(message)
    if message.text == 'Daily' or message.text == 'Relevant' or message.text == 'Fcking slang':
        topiccheck(message)
    if message.text == '–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å':
        progress(message)


def progress(message):
    time2()
    bot.send_message(message.chat.id, 'üî• –°–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å: ' + wordbase())
    bot.send_message(message.chat.id, 'üî• –ù–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –∑–∞ –¥–µ–Ω—å: ' + str(date.max))
    bot.send_message(message.chat.id, 'üî• –°–µ–≥–æ–¥–Ω—è —Å–ª–æ–≤ –≤—ã—É—á–µ–Ω–æ: ' + str(date.today))
    bot.send_message(message.chat.id, 'üî• –í –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–∑—É—á–µ–Ω–∏—è: ' + inlearning())
    markup_reply = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup_reply.add(item_back)
    bot.send_message(message.chat.id, '–ù–∏—á–∏–≥–æ —Å–µ–±–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ãüîù', reply_markup=markup_reply)


def wordbase():
    i = 0
    j = 0
    while i < 45:
        if wordss[i].prog == 2:
            j += 1
        i += 1
    return str(j)


def inlearning():
    i = 0
    j = 0
    while i < 45:
        if wordss[i].prog2 > 0 and wordss[i].prog == 1:
            j += 1
        i += 1
    return str(j)


def topicchoice(message):
    bot.send_message(message.chat.id, '1‚É£ Daily')
    bot.send_message(message.chat.id, '2‚É£ Relevant')
    bot.send_message(message.chat.id, '3‚É£ Fcking slang')
    markup_reply = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_progress = types.KeyboardButton('Daily')
    item_choice = types.KeyboardButton('Relevant')
    item_learn = types.KeyboardButton('Fcking slang')
    item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup_reply.add(item_progress, item_choice, item_learn, item_back)
    bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∞–π —Ç–µ–º—É)', reply_markup=markup_reply)


def topiccheck(message):
    topic = message.text.lower()
    i = 0
    learning.clear()
    j = 0
    while i < 45:
        if wordss[i].prog != 2 and wordss[i].topic == topic:
            learning.append(wordss[i])
            j += 1
        i += 1
        if j == 5:
            break
    if j < 5 and j != 0:
        learning.clear()
        bot.send_message(message.chat.id, '–í —ç—Ç–æ–º —Ç–æ–ø–∏–∫–µ –æ—Ç–∞–ª–æ—Å—å —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å–ª–æ–≤, –Ω–∞–π–¥–∏—Ç–µ –∏—Ö –≤ "–í—ã–±–æ—Ä–µ —Å–ª–æ–≤"')
        topicchoice()
    elif j == 0:
        bot.send_message(message.chat.id, '–¢—ã –∑–Ω–∞–µ—à—å –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ —ç—Ç–æ–≥–æ —Ç–æ–ø–∏–∫–∞üòâ')
        topicchoice(message)
    else:
        bot.send_message(message.chat.id, '–î–∞–≤–∞–π –ø–æ–≤—Ç–æ—Ä–∏–º —Å–ª–æ–≤–∞üòâ')
        rep(message)


def gamek(message):
    try:
        if game.mod == 0:
            bot.send_photo(message.chat.id, open('./imgs/' + learning[numbrs[game.gnum] - 1].img, 'rb'))
            game.word = learning[numbrs[game.gnum] - 1].wrd
        if game.mod == 2:
            bot.send_message(message.chat.id, learning[numbrs[game.gnum] - 1].trans)
            game.word = learning[numbrs[game.gnum] - 1].wrd
    except BaseException:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–π–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')
        main_menu(message)
    r = random.randint(1, 3)
    if r == 1:
        game.answer = 'a'
        r = learning[numbrs[game.gnum] - 1].wrd
        a = r
        game.gnum += 1
        b = learning[numbrs[game.gnum] - 1].wrd
        game.gnum += 1
        —Å = learning[numbrs[game.gnum] - 1].wrd
        game.gnum += 1
    elif r == 2:
        game.answer = 'b'
        r = learning[numbrs[game.gnum] - 1].wrd
        b = r
        game.gnum += 1
        a = learning[numbrs[game.gnum] - 1].wrd
        game.gnum += 1
        —Å = learning[numbrs[game.gnum] - 1].wrd
        game.gnum += 1
    elif r == 3:
        game.answer = 'c'
        r = learning[numbrs[game.gnum] - 1].wrd
        —Å = r
        game.gnum += 1
        a = learning[numbrs[game.gnum] - 1].wrd
        game.gnum += 1
        b = learning[numbrs[game.gnum] - 1].wrd
        game.gnum += 1
    markup_inline = types.InlineKeyboardMarkup()
    item_a = types.InlineKeyboardButton(text=a, callback_data='a')
    markup_inline.add(item_a)
    item_b = types.InlineKeyboardButton(text=b, callback_data='b')
    markup_inline.add(item_b)
    item_c = types.InlineKeyboardButton(text=—Å, callback_data='c')
    markup_inline.add(item_c)
    if game.mod == 0:
        bot.send_message(message.chat.id, '‚òù –ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ–ø–∏—Å—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É?', reply_markup=markup_inline)
    if game.mod == 2:
        bot.send_message(message.chat.id, '‚òù –ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ', reply_markup=markup_inline)


def gamer(message):
    try:
        if game.mod == 1:
            bot.send_message(message.chat.id, learning[numbrs[game.gnum] - 1].wrd)
            game.word = learning[numbrs[game.gnum] - 1].wrd
        if game.mod == 3:
            bot.send_message(message.chat.id, norus(learning[numbrs[game.gnum] - 1].diff))
            game.word = learning[numbrs[game.gnum] - 1].wrd
    except BaseException:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–π–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ ‚ùó')
        main_menu(message)
    r = random.randint(1, 3)
    if r == 1:
        game.answer = 'a'
        r = learning[numbrs[game.gnum] - 1].trans
        a = r
        game.gnum += 1
        b = learning[numbrs[game.gnum] - 1].trans
        game.gnum += 1
        —Å = learning[numbrs[game.gnum] - 1].trans
        game.gnum += 1
    elif r == 2:
        game.answer = 'b'
        r = learning[numbrs[game.gnum] - 1].trans
        b = r
        game.gnum += 1
        a = learning[numbrs[game.gnum] - 1].trans
        game.gnum += 1
        —Å = learning[numbrs[game.gnum] - 1].trans
        game.gnum += 1
    elif r == 3:
        game.answer = 'c'
        r = learning[numbrs[game.gnum] - 1].trans
        —Å = r
        game.gnum += 1
        a = learning[numbrs[game.gnum] - 1].trans
        game.gnum += 1
        b = learning[numbrs[game.gnum] - 1].trans
        game.gnum += 1
    markup_inline = types.InlineKeyboardMarkup()
    item_a = types.InlineKeyboardButton(text=a, callback_data='a')
    markup_inline.add(item_a)
    item_b = types.InlineKeyboardButton(text=b, callback_data='b')
    markup_inline.add(item_b)
    item_c = types.InlineKeyboardButton(text=—Å, callback_data='c')
    markup_inline.add(item_c)
    if game.mod == 1:
        bot.send_message(message.chat.id, '‚òù –ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ', reply_markup=markup_inline)
    if game.mod == 3:
        bot.send_message(message.chat.id, '‚òù –û —á–µ–º –∏–¥–µ—Ç —Ä–µ—á—å?', reply_markup=markup_inline)


def learni(message):
    i = 0
    learning.clear()
    j = 0
    while i < 45:
        if wordss[i].prog == 1:
            learning.append(wordss[i])
            j += 1
        i += 1
        if j == 5:
            break
    if j < 5:
        learning.clear()
        bot.send_message(message.chat.id, '–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 5 —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è ‚ùó')
        learn(message)
    else:
        bot.send_message(message.chat.id, '–î–∞–≤–∞–π –ø–æ–≤—Ç–æ—Ä–∏–º —Å–ª–æ–≤–∞üòâ')
        rep(message)


def rep(message):
    bot.send_photo(message.chat.id, open('./imgs/' + learning[nikita.lear].img, 'rb'))
    bot.send_message(message.chat.id, learning[nikita.lear].wrd + ' - ' + learning[nikita.lear].trans)
    bot.send_message(message.chat.id, learning[nikita.lear].diff)
    markup_reply = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_next = types.KeyboardButton('–°–ª–µ–¥—É—â–∏–µ')
    item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup_reply.add(item_next, item_back)
    bot.send_message(message.chat.id, 'üëÜ –ó–∞–ø–æ–º–∏–Ω–∞–π üëÜ', reply_markup=markup_reply)


def learnwords(message):
    i = 0
    j = 1
    while i < 45:
        if wordss[i].prog == 1:
            bot.send_message(message.chat.id, str(j) + '. ' + wordss[i].wrd + ' [' + str(wordss[i].prog2) + '/4]')
            j += 1
        i += 1
    if j == 1:
        bot.send_message(message.chat.id, '–ù–µ—Ç –∏–∑—É—á–µ–º—ã—Ö —Å–ª–æ–≤, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ –í—ã–±–æ—Ä —Å–ª–æ–≤ ‚ùó')
        main_menu(message)
    else:
        have(message)


def have(message):
    markup_reply = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_start = types.KeyboardButton('–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ')
    item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup_reply.add(item_start, item_back)
    bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∞–π üëÜ', reply_markup=markup_reply)


def learn(message):
    markup_reply = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_start = types.KeyboardButton('–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ')
    item_have = types.KeyboardButton('–ò–∑—É—á–∞–µ–º—ã–µ —Å–ª–æ–≤–∞')
    item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup_reply.add(item_start, item_have, item_back)
    bot.send_message(message.chat.id, 'üëá –í—ã–±–∏—Ä–∞–π', reply_markup=markup_reply)


def choice(message):
    try:
        if wordss[nikita.choic].prog == 0:
            bot.send_photo(message.chat.id, open('./imgs/' + wordss[nikita.choic].img, 'rb'))
            bot.send_message(message.chat.id, wordss[nikita.choic].wrd + ' - ' + wordss[nikita.choic].trans)
            bot.send_message(message.chat.id, wordss[nikita.choic].diff)
            markup_reply = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_yes = types.KeyboardButton('–ò–∑—É—á–∏—Ç—å')
            item_no = types.KeyboardButton('–û—Ç–ª–æ–∂–∏—Ç—å')
            item_know = types.KeyboardButton('–Ø –∑–Ω–∞—é —ç—Ç–æ —Å–ª–æ–≤–æ')
            item_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup_reply.add(item_yes, item_no, item_know, item_back)
            bot.send_message(message.chat.id, 'üëá –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É', reply_markup=markup_reply)
        else:
            nikita.choic += 1
            if nikita.choic >= 45:
                nikita.choic = 0
                choice(message)
            else:
                choice(message)
    except BaseException:
        bot.send_message(message.chat.id, '–°–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—åüò•')
        bot.send_message(message.chat.id, '–í—ã—É—á–∏—Ç–µ –µ—â–µ –Ω–µ–∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –∂–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö')
        nikita.choic = 0
        main_menu(message)


def main_menu(message):
    markup_reply = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_progress = types.KeyboardButton('–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å')
    item_choice = types.KeyboardButton('–í—ã–±–æ—Ä —Å–ª–æ–≤')
    item_learn = types.KeyboardButton('–£—á–∏—Ç—å —Å–ª–æ–≤–∞')
    item_topic = types.KeyboardButton('–í—ã–±–æ—Ä —Ç–æ–ø–∏–∫–∞')
    markup_reply.add(item_progress, item_choice, item_learn, item_topic)
    bot.send_message(message.chat.id, 'üîª –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üîª', reply_markup=markup_reply)


def norus(t):
    alphabet = ('–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è')
    lst = list(t)
    i = 0
    t = 0
    while i < len(lst):
        if t == 0:
            i += 1
        if lst[i] in alphabet:
            t = 1
        if t == 1:
            lst.pop(i)
    lst = "".join(lst)
    return [str(lst)]


def time1():
    x = datetime.datetime.now()
    if date.day == x.day and date.month == x.month:
        date.today += 1;
    else:
        if date.max < date.today:
            date.max = date.today
        date.today = 1
    date.day = x.day
    date.month = x.month
    saves()


def time2():
    x = datetime.datetime.now()
    if date.day != x.day or date.month != x.month:
        if date.max < date.today:
            date.max = date.today
        date.today = 0
    date.day = x.day
    date.month = x.month
    saves()


def saves():
    save = []
    save1 = []
    save1.append(str(date.day) + '\n')
    save1.append(str(date.month) + '\n')
    save1.append(str(date.today) + '\n')
    save1.append(str(date.max) + '\n')
    i = 0
    while i < len(wordss):
        save.append(str(wordss[i].wrd) + '\n')
        save.append(str(wordss[i].trans) + '\n')
        save.append(str(wordss[i].diff) + '\n')
        save.append(str(wordss[i].topic) + '\n')
        save.append(str(wordss[i].img) + '\n')
        save.append(str(wordss[i].prog) + '\n')
        save.append(str(wordss[i].prog2) + '\n')
        i += 1
    m = open("date.txt", "w", encoding='utf-8')
    m.writelines(save1)
    m.close
    m = open("date.txt", "r", encoding='utf-8')
    m.close
    f = open("words1.txt", "w", encoding='utf-8')
    f.writelines(save)
    f.close
    f = open("words1.txt", "r", encoding='utf-8')
    f.close


learning = []
wordss = []
numbrs = []
i = 0
f = open("words1.txt", "r", encoding='utf-8')
while i < 315:
    wordss.append(Words(f.readline().strip(), f.readline().strip(), f.readline().strip(), f.readline().strip(),
                        f.readline().strip(), f.readline(), f.readline()))
    i += 1
f.close()
i = 0
while i < 45:
    wordss[i].prog = int(wordss[i].prog)
    wordss[i].prog2 = int(wordss[i].prog2)
    i += 1
i = 0
f = open("nums.txt", "r", encoding='utf-8')
while i < 60:
    numbrs.append(f.readline())
    i += 1
f.close()
i = 0
while i < 60:
    numbrs[i] = int(numbrs[i])
    i += 1
i = 0
f = open("date.txt", "r", encoding='utf-8')
date = date(f.readline(), f.readline(), f.readline(), f.readline())
f.close()
date.day = int(date.day)
date.month = int(date.month)
date.today = int(date.today)
date.max = int(date.month)
nikita = user(0, 0, 0, 0)
game = game(0, 'no', 0, 'no', 0)
bot.polling(none_stop=True)
